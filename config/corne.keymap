/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
        layer_1_and_3: layer_1_and_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_1_AND_3";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 4>;
        };
        layer_2_and_4: layer_2_and_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_2_AND_4";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&mo 3>;
        };
    };

    macros {
        DS_Move: DS_Move {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp O &kp V &kp E &kp ENTER>;
            label = "DS_MOVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp ESCAPE  &kp Q         &kp W  &kp E     &kp R           &kp T        &kp Y    &kp U           &kp I      &kp O    &kp P             &kp BSPC
&kp TAB     &hml LSHFT A  &kp S  &kp D     &kp F           &kp G        &kp H    &kp J           &kp K      &kp L    &hmr RSHIFT SEMI  &kp SQT
&kp LCTRL   &kp Z         &kp X  &kp C     &kp V           &kp B        &kp N    &kp M           &kp COMMA  &kp DOT  &kp FSLH          &kp DEL
                                 &kp LGUI  &layer_1_and_3  &kp SPACE    &kp RET  &layer_2_and_4  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL  |
            // | SHFT | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT | CAPS|      |
            // | CTRL |     |     |     |     |     |   |     |     |     |     |     | BTCLR|
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&trans  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0    &kp BACKSPACE
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &kp CAPS  &bt BT_CLR
&trans  &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans    &trans
                                    &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | SHFT |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | CTRL |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&trans  &kp EXCL        &kp AT    &kp HASH   &kp DLLR              &kp PRCNT                &kp CARET         &kp AMPS           &kp KP_MULTIPLY  &kp PIPE         &kp TILDE  &kp BSPC
&trans  &kp MINUS       &kp PLUS  &kp EQUAL  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp BSLH   &kp GRAVE
&trans  &kp UNDERSCORE  &trans    &trans     &trans                &trans                   &trans            &trans             &trans           &trans           &trans     &trans
                                  &kp LGUI   &trans                &kp SPACE                &kp RET           &trans             &kp RALT
            >;
        };

        Draftsight_Layer {
            bindings = <
&trans  &trans    &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &DS_Move  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Function_Layer {
            bindings = <
&trans  &kp C_PREV  &kp C_REWIND  &kp C_PLAY_PAUSE  &kp C_FAST_FORWARD  &kp C_NEXT    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DEC  &kp C_BRI_INC  &trans
&kp F1  &kp F2      &kp F3        &kp F4            &kp F5              &kp F6        &kp F7      &kp F8        &kp F9        &kp F10        &kp F11        &kp F12
&trans  &trans      &trans        &trans            &trans              &trans        &trans      &trans        &trans        &trans         &trans         &trans
                                  &trans            &trans              &trans        &trans      &trans        &trans
            >;

            label = "Function Layer";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Function_Layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
